from typing import Sequence, Callable, Awaitable
from functools import partial

from field_of_dreams.core.entities.player import Player
from field_of_dreams.core.entities.chat import ChatID
from field_of_dreams.core.entities.user_stats import UserStats
from field_of_dreams.core.protocols.views.game import GameView
from field_of_dreams.infrastructure.tgbot.protocols import Bot


class GameViewImpl(GameView):
    ad_msg = "–í–æ–ø—Ä–æ—Å: {question}\n–°–ª–æ–≤–æ: {word_mask}.\n–ë—É–∫–≤ {length}"

    def __init__(self, bot: Bot):
        self._bot = bot

    async def show_queue(
        self, chat_id: ChatID, queue: Sequence[Player]
    ) -> None:
        players = " ".join(
            [
                f"\n{index+1}. {player.username}"
                for index, player in enumerate(queue)
            ]
        )
        await self._bot.send_message(chat_id, f"–¢–µ–∫—É—â–∞—è –æ—á–µ—Ä–µ–¥—å üëÄ:{players}")

    async def send_and_pin_word_mask(
        self, chat_id: ChatID, word_mask: str, question: str
    ) -> None:
        message = await self._bot.send_message(
            chat_id,
            self.ad_msg.format(
                question=question, word_mask=word_mask, length=len(word_mask)
            ),
        )
        await self._bot.pin_message(chat_id, message.message_id)

    async def update_word_mask(
        self, chat_id: ChatID, word_mask: str, question: str
    ) -> None:
        part_func = partial(
            self._bot.edit_message,
            text=self.ad_msg.format(
                question=question,
                word_mask=word_mask,
                length=len(word_mask),
            ),
        )
        await self._edit_pin(chat_id, part_func)

    async def unpin_word_mask(self, chat_id: ChatID) -> None:
        await self._edit_pin(chat_id, self._bot.unpin_message)

    async def _edit_pin(
        self, chat_id: ChatID, part_func: Callable[..., Awaitable]
    ) -> None:
        bot = await self._bot.get_me()
        chat = await self._bot.get_chat(chat_id)
        if message := chat.pinned_message:
            if user := message.from_user:
                if user.username == bot.username:
                    await part_func(
                        chat_id=chat_id, message_id=message.message_id
                    )

    async def notify_correct_letter(
        self,
        chat_id: ChatID,
        letter: str,
        count: int,
        username: str,
        score_per_turn: int,
    ) -> None:
        await self._bot.send_message(
            chat_id,
            text=(
                f"üéØ @{username} —É–≥–∞–¥–∞–ª –±—É–∫–≤—É '{letter}'!\n"
                f"ü´∞ –ù–∞—á–∏—Å–ª–µ–Ω–æ –±–∞–ª–ª–æ–≤ –∑–∞ —Ö–æ–¥: {score_per_turn}.\n"
                f"üëÄ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: {count}."
            ),
        )

    async def notify_wrong_letter(
        self, chat_id: ChatID, letter: str, username: str
    ) -> None:
        await self._bot.send_message(
            chat_id,
            text=f"ü§î @{username} –±—É–∫–≤–∞ '{letter}' –Ω–µ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –≤ —Å–ª–æ–≤–µ :(",
        )

    async def already_guessed_letter(
        self, chat_id: ChatID, letter: str, username: str
    ) -> None:
        await self._bot.send_message(
            chat_id,
            text=(
                f"ü•± @{username} –±—É–∫–≤—É '{letter}' —É–∂–µ —É–≥–∞–¥–∞–ª –¥—Ä—É–≥–æ–π –∏–≥—Ä–æ–∫. \n"
                "–ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–µ!"
            ),
        )

    async def notify_winner_letter(
        self,
        chat_id: ChatID,
        letter: str,
        username: str,
        count: int,
        score_per_turn: int,
        total_score: int,
    ) -> None:
        await self._bot.send_message(
            chat_id,
            text=(
                f"ü•≥ @{username} —É–≥–∞–¥–∞–ª –ø–æ—Å–ª–µ–¥–Ω—é—é –±—É–∫–≤—É '{letter}'!\n"
                f"ü´∞ –ù–∞—á–∏—Å–ª–µ–Ω–æ –±–∞–ª–ª–æ–≤ –∑–∞ —Ö–æ–¥: {score_per_turn}.\n"
                f"üëÄ –ë—É–∫–≤–∞ –≤—Å—Ç—Ä–µ—á–∞–ª–∞—Å—å {count} —Ä–∞–∑.\n"
                f"üìà –í—Å–µ–≥–æ –Ω–∞–±—Ä–∞–Ω–æ –±–∞–ª–ª–æ–≤ –∑–∞ –∏–≥—Ä—É: {total_score}."
            ),
        )

    async def notify_of_win_word(
        self,
        chat_id: ChatID,
        word: str,
        username: str,
        score_per_turn: int,
        total_score: int,
    ) -> None:
        await self._bot.send_message(
            chat_id,
            text=(
                f"ü•≥ @{username} —É–≥–∞–¥–∞–ª —Å–ª–æ–≤–æ '{word}'!\n"
                f"ü´∞ –ù–∞—á–∏—Å–ª–µ–Ω–æ –±–∞–ª–ª–æ–≤ –∑–∞ —Ö–æ–¥: {score_per_turn}.\n"
                f"üìà –í—Å–µ–≥–æ –Ω–∞–±—Ä–∞–Ω–æ –±–∞–ª–ª–æ–≤ –∑–∞ –∏–≥—Ä—É: {total_score}."
            ),
        )

    async def notify_loss_word(
        self,
        chat_id: ChatID,
        word: str,
        username: str,
    ) -> None:
        await self._bot.send_message(
            chat_id,
            text=(
                f"üòî @{username}, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é '{word}' "
                "–Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∑–∞–≥–∞–¥–∞–Ω–Ω—ã–º —Å–ª–æ–≤–æ–º :(\n"
                "üó£ –¢—ã –≤—ã–±—ã–≤–∞–µ—à—å –∏–∑ –∏–≥—Ä—ã. "
                "–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ "
                "–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∏—Ç—Å—è —É–≥–∞–¥–∞—Ç—å!"
            ),
        )

    async def notify_empty_stats(self, chat_id: ChatID) -> None:
        await self._bot.send_message(
            chat_id,
            text=(
                "–í —ç—Ç–æ–º —á–∞—Ç–µ –Ω–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–ª–∞—Å—å –µ—â—ë –Ω–∏ –æ–¥–Ω–∞ –∏–≥—Ä–∞ ü´§ \n"
                "–ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É! /game"
            ),
        )

    async def show_stats(
        self, chat_id: ChatID, stats: Sequence[UserStats]
    ) -> None:
        statistics = " ".join(
            [
                (
                    f"\n{index+1}. {stat.user.name} "
                    f"–ø–æ–±–µ–¥: {stat.wins} –æ—á–∫–æ–≤: {stat.total_score}"
                )
                for index, stat in enumerate(stats)
            ]
        )
        await self._bot.send_message(
            chat_id, text=f"üìà –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:{statistics}"
        )

    async def notify_empty_stats_chat_not_exists(self, chat_id: ChatID):
        await self._bot.send_message(
            chat_id,
            text=(
                "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Çü´§"
                "–î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å–æ –º–Ω–æ–π - /start"
                "–ò –Ω–∞—á–∏—Ç–µ –∏–≥—Ä—É - /game"
            ),
        )

    async def notify_dont_support_numeric(
        self, chat_id: ChatID, username: str
    ) -> None:
        await self._bot.send_message(
            chat_id, text=(f"@{username} —Å–ª–æ–≤–∞ –Ω–µ –º–æ–≥—É—Ç —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ —á–∏—Å–µ–ª üôÑ")
        )

    async def notify_dont_support_punctuation(
        self, chat_id: ChatID, username: str
    ) -> None:
        await self._bot.send_message(
            chat_id,
            text=(
                f"@{username} —Å–ª–æ–≤–∞ –Ω–µ –º–æ–≥—É—Ç —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ –∑–Ω–∞–∫–æ–≤ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏ üôÑ"
            ),
        )
