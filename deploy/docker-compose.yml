version: '3.8'

services:
  db:
    container_name: fod_db
    image: postgres:14
    volumes:
      - fod_db_data:/var/lib/postgresql/data
    ports:
      - ${HOST_POSTGRES_PORT}:${POSTGRES_PORT}
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    restart: on-failure
  
  migrations:
    image: ${BASE_IMAGE}
    command: ["make", "migrate-up"]
    env_file:
      - .env
    depends_on:
      - db

  rabbitmq:
    container_name: fod_rabbitmq
    image: rabbitmq:3.11.10-management
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBIT_USERNAME}
      RABBITMQ_DEFAULT_PASS: ${RABBIT_PASSWORD}
    ports:
      - ${RABBIT_HOST_PORT}:${RABBIT_PORT}
      - ${RABBIT_MANAGE_HOST_PORT}:${RABBIT_MANAGE_PORT}
    volumes:
      - fod_rabbitmq_data:/var/lib/rabbitmq
    restart: on-failure
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5

  bot:
    container_name: fod_bot
    image: ${BASE_IMAGE}
    depends_on:
      - amqp
    env_file:
      - .env
    command: ["make", "run-bot"]
    restart: on-failure
  
  api:
    container_name: fod_api
    image: ${BASE_IMAGE}
    ports:
     - ${API_HOST_PORT}:${API_PORT}
    depends_on:
      - migrations
    env_file:
      - .env
    command: ["make", "run-api"]
    restart: on-failure
  
  amqp:
    container_name: fod_amqp
    image: ${BASE_IMAGE}
    depends_on:
      rabbitmq:
        condition: service_healthy
      migrations:
        condition: service_started
    env_file:
      - .env
    command: ["make", "run-amqp"]
    restart: on-failure

  redis:
    container_name: fod_redis
    image: redis:7
    expose:
      - 6379
  
volumes:
  fod_db_data:
  fod_rabbitmq_data: